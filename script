import pynetbox
import re
from pysnmp.hlapi import *


# Netbox connection
nb = pynetbox.api(
    'http://X.X.X.X:8000/',
    token='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
)

# Filter Active devices in Tenant NOC
noc_active_filter_cisco = nb.dcim.devices.filter(tenant="noc", status="active", platform={"cisco"})
noc_active_filter_nexus = nb.dcim.devices.filter(tenant="noc", status="active", platform={"nx-os"})
noc_active_filter_asa = nb.dcim.devices.filter(tenant="noc", status="active", platform={"cisco-asa"})
noc_active_filter_aruba = nb.dcim.devices.filter(tenant="noc", status="active", platform={"aruba"})
noc_active_filter_panos = nb.dcim.devices.filter(tenant="noc", status="active", platform={"panos"})

# Define SNMP community
snmp_community = "xxxxxxxx"

# OID's
cisco_oid = ".1.3.6.1.4.1.9.9.25.1.1.1.2.5"
nexus_oid = ".1.3.6.1.4.1.9.9.25.1.1.1.2.5"
asa_oid = "1.3.6.1.2.1.1.1.0"
aruba_oid = "1.3.6.1.4.1.11.2.14.11.5.1.59.1.3.1.4"
panos_oid = "1.3.6.1.4.1.25461.2.1.2.1.1"


def get_snmp(ip_final, oid):
	for (errorIndication,
		errorStatus,
		errorIndex,
		varBinds) in getCmd(SnmpEngine(),
			CommunityData(snmp_community, mpModel=0),
			UdpTransportTarget((ip_final, 161)),
			ContextData(),
			ObjectType(ObjectIdentity(oid))):
		if errorIndication:
			print(errorIndication)
		elif errorStatus:
			print('%s at %s' % (errorStatus.prettyPrint(),
			errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))
		else:
			for varBind in varBinds:
				varBind_str = str(varBind)
				varBind_format = varBind_str.split("= ", 1)[1]
				return varBind_format

def main():
	for device in noc_active_filter_cisco:
		try:
			ip = device.primary_ip
			ip_str = str(ip)
			ip_final = re.sub('\/32$', '', ip_str)
			print (ip_final)
			if ip:
				soft_version = get_snmp(ip_final, cisco_oid)
				print (soft_version)
				device.custom_fields["sw_version"] = soft_version
				device.save()
			else:
				continue
		except:
			print("can't connect")

	for device in noc_active_filter_nexus:
		try:
			ip = device.primary_ip
			ip_str = str(ip)
			ip_final = re.sub('\/32$', '', ip_str)
			print (ip_final)
			if ip:
				soft_version = get_snmp(ip_final, nexus_oid)
				device.custom_fields["sw_version"] = soft_version
				device.save()
			else:
				continue
		except:
			print("can't connect")

	for device in noc_active_filter_asa:
		try:
			ip = device.primary_ip
			ip_str = str(ip)
			ip_final = re.sub('\/32$', '', ip_str)
			print (ip_final)
			if ip:
				soft_version = get_snmp(ip_final, asa_oid)
				device.custom_fields["sw_version"] = soft_version
				device.save()
			else:
				continue
		except:
			print("can't connect")

	for device in noc_active_filter_aruba:
		try:
			ip = device.primary_ip
			ip_str = str(ip)
			ip_final = re.sub('\/32$', '', ip_str)
			print (ip_final)
			if ip:
				soft_version = get_snmp(ip_final, aruba_oid)
				device.custom_fields["sw_version"] = soft_version
				device.save()
			else:
				continue
		except:
			print("can't connect")

	for device in noc_active_filter_panos:
		try:
			ip = device.primary_ip
			ip_str = str(ip)
			ip_final = re.sub('\/32$', '', ip_str)
			print (ip_final)
			if ip:
				soft_version = get_snmp(ip_final, panos_oid)
				device.custom_fields["sw_version"] = soft_version
				device.save()
			else:
				continue
		except:
			print("can't connect")



if __name__ == '__main__':
	main();
